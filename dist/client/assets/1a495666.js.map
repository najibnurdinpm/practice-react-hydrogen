{"version":3,"file":"1a495666.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/ProductMetafield/ProductMetafield.client.js"],"sourcesContent":["import React from 'react';\nimport { Metafield } from '../Metafield';\nimport { useProduct } from '../../hooks/useProduct/useProduct';\nimport { flattenConnection } from '../../utilities';\n/**\n * The `ProductMetafield` component renders a\n * [`Metafield`](https://shopify.dev/api/hydrogen/components/primitive/metafield) component with the product metafield.\n * It must be a descendent of a `ProductProvider` component.\n */\nexport function ProductMetafield(props) {\n    var _a, _b, _c;\n    const product = useProduct();\n    if (product == null) {\n        throw new Error('Expected a ProductProvider context, but none was found');\n    }\n    if (product.metafields == null) {\n        console.warn('No metafields available for product');\n        return null;\n    }\n    const { namespace, keyName, variantId, ...passthroughProps } = props;\n    const metafields = (variantId\n        ? flattenConnection((_c = (_b = (_a = product.variants) === null || _a === void 0 ? void 0 : _a.find((variant) => (variant === null || variant === void 0 ? void 0 : variant.id) === variantId)) === null || _b === void 0 ? void 0 : _b.metafields) !== null && _c !== void 0 ? _c : {})\n        : product.metafields); // TODO: fix the typing here and ensure it's correct\n    const field = metafields === null || metafields === void 0 ? void 0 : metafields.find((metafield) => metafield.namespace === namespace && metafield.key === keyName);\n    if (field === null || field === undefined) {\n        const message = 'does not have a value for metafield.';\n        const productOrVariant = variantId ? `Variant` : 'Product';\n        const logItems = {\n            variantId,\n            ProductId: product.id,\n            namespace,\n            keyName,\n        };\n        console.warn([\n            productOrVariant,\n            message,\n            ...Object.entries(logItems).map(([key, val]) => `${key}: ${val}`),\n        ].join(' '));\n        return null;\n    }\n    return React.createElement(Metafield, { data: field, ...passthroughProps });\n}\n"],"names":[],"mappings":"qxBASO,WAA0B,EAAO,CACpC,GAAI,GAAI,EAAI,EACZ,KAAM,GAAU,IAChB,GAAI,GAAW,KACX,KAAM,IAAI,OAAM,wDAAwD,EAE5E,GAAI,EAAQ,YAAc,KACtB,eAAQ,KAAK,qCAAqC,EAC3C,KAEX,KAA+D,KAAvD,aAAW,UAAS,aAAmC,EAArB,IAAqB,EAArB,CAAlC,YAAW,UAAS,cACtB,EAAc,EACd,EAAmB,GAAM,GAAM,GAAK,EAAQ,YAAc,MAAQ,IAAO,OAAS,OAAS,EAAG,KAAK,AAAC,GAAa,IAAY,KAA6B,OAAS,EAAQ,MAAQ,CAAS,KAAO,MAAQ,IAAO,OAAS,OAAS,EAAG,cAAgB,MAAQ,IAAO,OAAS,EAAK,EAAE,EACtR,EAAQ,WACR,EAAQ,GAAe,KAAgC,OAAS,EAAW,KAAK,AAAC,GAAc,EAAU,YAAc,GAAa,EAAU,MAAQ,CAAO,EACnK,GAAI,GAAU,KAA6B,CACvC,KAAM,GAAU,uCACV,EAAmB,EAAY,UAAY,UAC3C,EAAW,CACb,YACA,UAAW,EAAQ,GACnB,YACA,SACZ,EACQ,eAAQ,KAAK,CACT,EACA,EACA,GAAG,OAAO,QAAQ,CAAQ,EAAE,IAAI,CAAC,CAAC,EAAK,KAAS,GAAG,MAAQ,GAAK,CAC5E,EAAU,KAAK,GAAG,CAAC,EACJ,IACV,CACD,MAAO,GAAM,cAAc,EAAW,GAAE,KAAM,GAAU,EAAkB,CAC9E"}