{"version":3,"file":"25a01183.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useProductOptions/helpers.js","../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useProductOptions/useProductOptions.client.js"],"sourcesContent":["export function getAllOptionValues(variants, option) {\n    return Array.from(new Set(variants.map((variant) => variant.selectedOptions.find((selection) => selection.name == option)\n        .value)));\n}\nexport function getSelectedVariant(variants, choices) {\n    var _a, _b;\n    /**\n     * Ensure the user has selected all the required options, not just some.\n     */\n    if (!variants.length ||\n        ((_b = (_a = variants === null || variants === void 0 ? void 0 : variants[0]) === null || _a === void 0 ? void 0 : _a.selectedOptions) === null || _b === void 0 ? void 0 : _b.length) !== Object.keys(choices).length) {\n        return;\n    }\n    return variants === null || variants === void 0 ? void 0 : variants.find((variant) => {\n        return Object.entries(choices).every(([name, value]) => {\n            var _a;\n            return (_a = variant === null || variant === void 0 ? void 0 : variant.selectedOptions) === null || _a === void 0 ? void 0 : _a.some((option) => (option === null || option === void 0 ? void 0 : option.name) === name && (option === null || option === void 0 ? void 0 : option.value) === value);\n        });\n    });\n}\nexport function getOptions(variants) {\n    const map = variants.reduce((memo, variant) => {\n        var _a;\n        if (!variant.selectedOptions) {\n            throw new Error(`getOptions requires 'variant.selectedOptions`);\n        }\n        (_a = variant === null || variant === void 0 ? void 0 : variant.selectedOptions) === null || _a === void 0 ? void 0 : _a.forEach((opt) => {\n            var _a, _b, _c, _d;\n            memo[(_a = opt === null || opt === void 0 ? void 0 : opt.name) !== null && _a !== void 0 ? _a : ''] = memo[(_b = opt === null || opt === void 0 ? void 0 : opt.name) !== null && _b !== void 0 ? _b : ''] || new Set();\n            memo[(_c = opt === null || opt === void 0 ? void 0 : opt.name) !== null && _c !== void 0 ? _c : ''].add((_d = opt === null || opt === void 0 ? void 0 : opt.value) !== null && _d !== void 0 ? _d : '');\n        });\n        return memo;\n    }, {});\n    return Object.keys(map).map((option) => {\n        return {\n            name: option,\n            values: Array.from(map[option]),\n        };\n    });\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { flattenConnection } from '../../utilities';\nimport { getOptions, getSelectedVariant } from './helpers';\n/**\n * The `useProductOptions` hook returns an object that enables you to keep track of the\n * selected variant and/or selling plan state, as well as callbacks for modifying the state.\n */\nexport function useProductOptions({ variants: variantsConnection, sellingPlanGroups: sellingPlanGroupsConnection, initialVariantId: explicitVariantId, }) {\n    // The flattened variants\n    const variants = useMemo(() => (variantsConnection ? flattenConnection(variantsConnection) : []), [variantsConnection]);\n    // All the options available for a product, based on all the variants\n    const options = useMemo(() => getOptions(variants), [variants]);\n    // TODO: we have some weird variable shadowing going on here that probably needs to be looked at. This variable is the same name as a prop\n    const initialVariantId = explicitVariantId === null\n        ? explicitVariantId\n        : variants.find((variant) => variant.id === explicitVariantId) ||\n            variants.find((variant) => variant.availableForSale) ||\n            variants[0];\n    /**\n     * Track the selectedVariant within the hook. If `initialVariantId`\n     * is passed, use that as an initial value.\n     */\n    const [selectedVariant, setSelectedVariant] = useState(initialVariantId);\n    /**\n     * Track the selectedOptions within the hook. If a `initialVariantId`\n     * is passed, use that to select initial options.\n     */\n    const [selectedOptions, setSelectedOptions] = useState((selectedVariant === null || selectedVariant === void 0 ? void 0 : selectedVariant.selectedOptions)\n        ? selectedVariant.selectedOptions.reduce((memo, optionSet) => {\n            var _a, _b;\n            memo[(_a = optionSet === null || optionSet === void 0 ? void 0 : optionSet.name) !== null && _a !== void 0 ? _a : ''] = (_b = optionSet === null || optionSet === void 0 ? void 0 : optionSet.value) !== null && _b !== void 0 ? _b : '';\n            return memo;\n        }, {})\n        : {});\n    /**\n     * When the initialVariantId changes, we need to make sure we\n     * update the selected variant and selected options. If not,\n     * then the selected variant and options will reference incorrect\n     * values.\n     */\n    useEffect(() => {\n        const variant = getSelectedVariant(variants, selectedOptions);\n        setSelectedVariant(variant);\n    }, [selectedOptions, variants]);\n    /**\n     * Allow the developer to select an option.\n     */\n    const setSelectedOption = useCallback((name, value) => {\n        setSelectedOptions((selectedOptions) => ({\n            ...selectedOptions,\n            [name]: value,\n        }));\n    }, [setSelectedOptions]);\n    const isOptionInStock = useCallback((option, value) => {\n        var _a;\n        const proposedVariant = getSelectedVariant(variants, {\n            ...selectedOptions,\n            ...{ [option]: value },\n        });\n        return (_a = proposedVariant === null || proposedVariant === void 0 ? void 0 : proposedVariant.availableForSale) !== null && _a !== void 0 ? _a : true;\n    }, [selectedOptions, variants]);\n    const sellingPlanGroups = useMemo(() => sellingPlanGroupsConnection\n        ? flattenConnection(sellingPlanGroupsConnection).map((sellingPlanGroup) => ({\n            ...sellingPlanGroup,\n            sellingPlans: (sellingPlanGroup === null || sellingPlanGroup === void 0 ? void 0 : sellingPlanGroup.sellingPlans)\n                ? flattenConnection(sellingPlanGroup.sellingPlans)\n                : [],\n        }))\n        : [], [sellingPlanGroupsConnection]);\n    /**\n     * Track the selectedSellingPlan within the hook. If `initialSellingPlanId`\n     * is passed, use that as an initial value. Look it up from the `selectedVariant`, since\n     * that is also a requirement.\n     */\n    const [selectedSellingPlan, setSelectedSellingPlan] = useState(undefined);\n    const selectedSellingPlanAllocation = useMemo(() => {\n        if (!selectedVariant || !selectedSellingPlan) {\n            return;\n        }\n        if (!selectedVariant.sellingPlanAllocations) {\n            throw new Error(`You must include sellingPlanAllocations in your variants in order to calculate selectedSellingPlanAllocation`);\n        }\n        return flattenConnection(selectedVariant.sellingPlanAllocations).find(\n        // @ts-ignore The types here are broken on main, need to come back and fix them sometime\n        (allocation) => allocation.sellingPlan.id === selectedSellingPlan.id);\n    }, [selectedVariant, selectedSellingPlan]);\n    return {\n        // @ts-ignore The types here are broken on main, need to come back and fix them sometime\n        variants,\n        // @ts-ignore The types here are broken on main, need to come back and fix them sometime\n        variantsConnection,\n        options,\n        // @ts-ignore The types here are broken on main, need to come back and fix them sometime\n        selectedVariant,\n        setSelectedVariant,\n        selectedOptions,\n        setSelectedOption,\n        setSelectedOptions,\n        isOptionInStock,\n        selectedSellingPlan,\n        setSelectedSellingPlan,\n        selectedSellingPlanAllocation,\n        // @ts-ignore The types here are broken on main, need to come back and fix them sometime\n        sellingPlanGroups,\n        // @ts-ignore The types here are broken on main, need to come back and fix them sometime\n        sellingPlanGroupsConnection,\n    };\n}\n"],"names":["useMemo","useState","useEffect","useCallback"],"mappings":"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"}