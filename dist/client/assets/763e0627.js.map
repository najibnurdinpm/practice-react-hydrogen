{"version":3,"file":"763e0627.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/constants.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/CartProvider/CartProvider.client.js"],"sourcesContent":["export const CART_ID_STORAGE_KEY = 'shopifyCartId';\nexport const CART_COOKIE_TTL_DAYS = 14;\n","import React, { useEffect, useCallback, useReducer, useMemo, useRef, } from 'react';\nimport { flattenConnection } from '../../utilities';\nimport { CartLineAdd, CartCreate, CartLineRemove, CartLineUpdate, CartNoteUpdate, CartBuyerIdentityUpdate, CartAttributesUpdate, CartDiscountCodesUpdate, CartQuery, defaultCartFragment, } from './cart-queries';\nimport { useCartFetch } from './hooks.client';\nimport { CartContext } from './context';\nimport { CART_ID_STORAGE_KEY } from './constants';\nimport { useServerProps } from '../../foundation/useServerProps';\nimport { ClientAnalytics } from '../../foundation/Analytics';\nfunction cartReducer(state, action) {\n    switch (action.type) {\n        case 'cartFetch': {\n            if (state.status === 'uninitialized') {\n                return {\n                    status: 'fetching',\n                };\n            }\n            break;\n        }\n        case 'cartCreate': {\n            if (state.status === 'uninitialized') {\n                return {\n                    status: 'creating',\n                };\n            }\n            break;\n        }\n        case 'resolve': {\n            const resolvableStatuses = ['updating', 'fetching', 'creating'];\n            if (resolvableStatuses.includes(state.status)) {\n                return {\n                    status: 'idle',\n                    cart: action.cart,\n                };\n            }\n            break;\n        }\n        case 'reject': {\n            if (state.status === 'fetching' || state.status === 'creating') {\n                return { status: 'uninitialized', error: action.error };\n            }\n            else if (state.status === 'updating') {\n                return {\n                    status: 'idle',\n                    cart: state.lastValidCart,\n                    error: action.error,\n                };\n            }\n            break;\n        }\n        case 'resetCart': {\n            if (state.status === 'fetching') {\n                return { status: 'uninitialized' };\n            }\n            break;\n        }\n        case 'addLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'removeLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: {\n                        ...state.cart,\n                        lines: state.cart.lines.filter(({ id }) => !action.lines.includes(id)),\n                    },\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'updateLineItem': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: {\n                        ...state.cart,\n                        lines: state.cart.lines.map((line) => {\n                            const updatedLine = action.lines.find(({ id }) => id === line.id);\n                            if (updatedLine && updatedLine.quantity) {\n                                return {\n                                    ...line,\n                                    quantity: updatedLine.quantity,\n                                };\n                            }\n                            return line;\n                        }),\n                    },\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'noteUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'buyerIdentityUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'cartAttributesUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n        case 'discountCodesUpdate': {\n            if (state.status === 'idle') {\n                return {\n                    status: 'updating',\n                    cart: state.cart,\n                    lastValidCart: state.cart,\n                };\n            }\n            break;\n        }\n    }\n    throw new Error(`Cannot dispatch event (${action.type}) for current cart state (${state.status})`);\n}\n/**\n * The `CartProvider` component creates a context for using a cart. It creates a cart object and callbacks\n * that can be accessed by any descendent component using the `useCart` hook and related hooks. It also carries out\n * any callback props when a relevant action is performed. For example, if a `onLineAdd` callback is provided,\n * then the callback will be called when a new line item is successfully added to the cart.\n *\n * The `CartProvider` component must be a descendent of the `ShopifyProvider` component.\n * You must use this component if you want to use the `useCart` hook or related hooks, or if you would like to use the `AddToCartButton` component.\n */\nexport function CartProvider({ children, numCartLines, onCreate, onLineAdd, onLineRemove, onLineUpdate, onNoteUpdate, onBuyerIdentityUpdate, onAttributesUpdate, onDiscountCodesUpdate, data: cart, cartFragment = defaultCartFragment, }) {\n    var _a;\n    const { serverProps } = useServerProps();\n    const countryCode = (_a = serverProps === null || serverProps === void 0 ? void 0 : serverProps.country) === null || _a === void 0 ? void 0 : _a.isoCode;\n    const initialStatus = cart\n        ? { status: 'idle', cart: cartFromGraphQL(cart) }\n        : { status: 'uninitialized' };\n    const [state, dispatch] = useReducer((state, dispatch) => cartReducer(state, dispatch), initialStatus);\n    const fetchCart = useCartFetch();\n    const cartFetch = useCallback(async (cartId) => {\n        dispatch({ type: 'cartFetch' });\n        const { data } = await fetchCart({\n            query: CartQuery(cartFragment),\n            variables: {\n                id: cartId,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n        if (!(data === null || data === void 0 ? void 0 : data.cart)) {\n            window.localStorage.removeItem(CART_ID_STORAGE_KEY);\n            dispatch({ type: 'resetCart' });\n            return;\n        }\n        dispatch({ type: 'resolve', cart: cartFromGraphQL(data.cart) });\n    }, [fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartCreate = useCallback(async (cart) => {\n        var _a, _b;\n        dispatch({ type: 'cartCreate' });\n        onCreate === null || onCreate === void 0 ? void 0 : onCreate();\n        if (countryCode && !((_a = cart.buyerIdentity) === null || _a === void 0 ? void 0 : _a.countryCode)) {\n            if (cart.buyerIdentity == null) {\n                cart.buyerIdentity = {};\n            }\n            cart.buyerIdentity.countryCode = countryCode;\n        }\n        const { data, error } = await fetchCart({\n            query: CartCreate(cartFragment),\n            variables: {\n                input: cart,\n                numCartLines,\n                country: countryCode,\n            },\n        });\n        if (error) {\n            dispatch({\n                type: 'reject',\n                error,\n            });\n        }\n        if ((_b = data === null || data === void 0 ? void 0 : data.cartCreate) === null || _b === void 0 ? void 0 : _b.cart) {\n            if (cart.lines) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n                    addedCartLines: cart.lines,\n                    cart: data.cartCreate.cart,\n                });\n            }\n            dispatch({\n                type: 'resolve',\n                cart: cartFromGraphQL(data.cartCreate.cart),\n            });\n            window.localStorage.setItem(CART_ID_STORAGE_KEY, data.cartCreate.cart.id);\n        }\n    }, [onCreate, countryCode, fetchCart, cartFragment, numCartLines]);\n    const addLineItem = useCallback(async (lines, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'addLineItem' });\n            onLineAdd === null || onLineAdd === void 0 ? void 0 : onLineAdd();\n            const { data, error } = await fetchCart({\n                query: CartLineAdd(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartLinesAdd) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.ADD_TO_CART, true, {\n                    addedCartLines: lines,\n                    cart: data.cartLinesAdd.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesAdd.cart),\n                });\n            }\n        }\n    }, [onLineAdd, fetchCart, cartFragment, numCartLines, countryCode]);\n    const removeLineItem = useCallback(async (lines, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'removeLineItem', lines });\n            onLineRemove === null || onLineRemove === void 0 ? void 0 : onLineRemove();\n            const { data, error } = await fetchCart({\n                query: CartLineRemove(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartLinesRemove) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.REMOVE_FROM_CART, true, {\n                    removedCartLines: lines,\n                    cart: data.cartLinesRemove.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesRemove.cart),\n                });\n            }\n        }\n    }, [onLineRemove, fetchCart, cartFragment, numCartLines, countryCode]);\n    const updateLineItem = useCallback(async (lines, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'updateLineItem', lines });\n            onLineUpdate === null || onLineUpdate === void 0 ? void 0 : onLineUpdate();\n            const { data, error } = await fetchCart({\n                query: CartLineUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    lines,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartLinesUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.UPDATE_CART, true, {\n                    updatedCartLines: lines,\n                    oldCart: state.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartLinesUpdate.cart),\n                });\n            }\n        }\n    }, [onLineUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const noteUpdate = useCallback(async (note, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'noteUpdate' });\n            onNoteUpdate === null || onNoteUpdate === void 0 ? void 0 : onNoteUpdate();\n            const { data, error } = await fetchCart({\n                query: CartNoteUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    note,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartNoteUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartNoteUpdate.cart),\n                });\n            }\n        }\n    }, [onNoteUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const buyerIdentityUpdate = useCallback(async (buyerIdentity, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'buyerIdentityUpdate' });\n            onBuyerIdentityUpdate === null || onBuyerIdentityUpdate === void 0 ? void 0 : onBuyerIdentityUpdate();\n            const { data, error } = await fetchCart({\n                query: CartBuyerIdentityUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    buyerIdentity,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartBuyerIdentityUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartBuyerIdentityUpdate.cart),\n                });\n            }\n        }\n    }, [onBuyerIdentityUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const cartAttributesUpdate = useCallback(async (attributes, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'cartAttributesUpdate' });\n            onAttributesUpdate === null || onAttributesUpdate === void 0 ? void 0 : onAttributesUpdate();\n            const { data, error } = await fetchCart({\n                query: CartAttributesUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    attributes,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartAttributesUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartAttributesUpdate.cart),\n                });\n            }\n        }\n    }, [onAttributesUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const discountCodesUpdate = useCallback(async (discountCodes, state) => {\n        var _a;\n        if (state.status === 'idle') {\n            dispatch({ type: 'discountCodesUpdate' });\n            onDiscountCodesUpdate === null || onDiscountCodesUpdate === void 0 ? void 0 : onDiscountCodesUpdate();\n            const { data, error } = await fetchCart({\n                query: CartDiscountCodesUpdate(cartFragment),\n                variables: {\n                    cartId: state.cart.id,\n                    discountCodes,\n                    numCartLines,\n                    country: countryCode,\n                },\n            });\n            if (error) {\n                dispatch({\n                    type: 'reject',\n                    error,\n                });\n            }\n            if ((_a = data === null || data === void 0 ? void 0 : data.cartDiscountCodesUpdate) === null || _a === void 0 ? void 0 : _a.cart) {\n                ClientAnalytics.publish(ClientAnalytics.eventNames.DISCOUNT_CODE_UPDATED, true, {\n                    updatedDiscountCodes: discountCodes,\n                    cart: data.cartDiscountCodesUpdate.cart,\n                });\n                dispatch({\n                    type: 'resolve',\n                    cart: cartFromGraphQL(data.cartDiscountCodesUpdate.cart),\n                });\n            }\n        }\n    }, [onDiscountCodesUpdate, fetchCart, cartFragment, numCartLines, countryCode]);\n    const didFetchCart = useRef(false);\n    useEffect(() => {\n        if (localStorage.getItem(CART_ID_STORAGE_KEY) &&\n            state.status === 'uninitialized' &&\n            !didFetchCart.current) {\n            didFetchCart.current = true;\n            cartFetch(localStorage.getItem(CART_ID_STORAGE_KEY));\n        }\n    }, [cartFetch, state]);\n    useEffect(() => {\n        if (state.status !== 'idle') {\n            return;\n        }\n        buyerIdentityUpdate({ countryCode }, state);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [countryCode]);\n    const cartContextValue = useMemo(() => {\n        return {\n            ...('cart' in state\n                ? state.cart\n                : {\n                    lines: [],\n                    attributes: [],\n                    ...(cart ? cartFromGraphQL(cart) : {}),\n                }),\n            status: state.status,\n            error: 'error' in state ? state.error : undefined,\n            totalQuantity: 'cart' in state\n                ? state.cart.lines.reduce((previous, current) => {\n                    return previous + current.quantity;\n                }, 0)\n                : 0,\n            cartCreate,\n            linesAdd(lines) {\n                if ('cart' in state && state.cart.id) {\n                    addLineItem(lines, state);\n                }\n                else {\n                    cartCreate({ lines });\n                }\n            },\n            linesRemove(lines) {\n                removeLineItem(lines, state);\n            },\n            linesUpdate(lines) {\n                updateLineItem(lines, state);\n            },\n            noteUpdate(note) {\n                noteUpdate(note, state);\n            },\n            buyerIdentityUpdate(buyerIdentity) {\n                buyerIdentityUpdate(buyerIdentity, state);\n            },\n            cartAttributesUpdate(attributes) {\n                cartAttributesUpdate(attributes, state);\n            },\n            discountCodesUpdate(discountCodes) {\n                discountCodesUpdate(discountCodes, state);\n            },\n            cartFragment,\n        };\n    }, [\n        state,\n        cart,\n        cartCreate,\n        cartFragment,\n        addLineItem,\n        removeLineItem,\n        updateLineItem,\n        noteUpdate,\n        buyerIdentityUpdate,\n        cartAttributesUpdate,\n        discountCodesUpdate,\n    ]);\n    return (React.createElement(CartContext.Provider, { value: cartContextValue }, children));\n}\nfunction cartFromGraphQL(cart) {\n    var _a;\n    return {\n        ...cart,\n        // @ts-expect-error While the cart still uses fragments, there will be a TS error here until we remove those fragments and get the type in-line\n        lines: flattenConnection(cart.lines),\n        note: (_a = cart.note) !== null && _a !== void 0 ? _a : undefined,\n    };\n}\n"],"names":["state","action","type","status","resolvableStatuses","includes","cart","error","lastValidCart","lines","filter","id","map","line","updatedLine","find","quantity","Error","children","numCartLines","onCreate","onLineAdd","onLineRemove","onLineUpdate","onNoteUpdate","onBuyerIdentityUpdate","onAttributesUpdate","onDiscountCodesUpdate","data","cartFragment","defaultCartFragment","_a","serverProps","useServerProps","countryCode","country","isoCode","initialStatus","cartFromGraphQL","dispatch","useReducer","cartReducer","fetchCart","useCartFetch","cartFetch","useCallback","cartId","query","CartQuery","variables","window","localStorage","removeItem","CART_ID_STORAGE_KEY","cartCreate","_b","buyerIdentity","CartCreate","input","ClientAnalytics","publish","eventNames","ADD_TO_CART","addedCartLines","setItem","addLineItem","CartLineAdd","cartLinesAdd","removeLineItem","CartLineRemove","cartLinesRemove","REMOVE_FROM_CART","removedCartLines","updateLineItem","CartLineUpdate","cartLinesUpdate","UPDATE_CART","updatedCartLines","oldCart","noteUpdate","note","CartNoteUpdate","cartNoteUpdate","buyerIdentityUpdate","CartBuyerIdentityUpdate","cartBuyerIdentityUpdate","cartAttributesUpdate","attributes","CartAttributesUpdate","discountCodesUpdate","discountCodes","CartDiscountCodesUpdate","cartDiscountCodesUpdate","DISCOUNT_CODE_UPDATED","updatedDiscountCodes","didFetchCart","useRef","useEffect","getItem","current","cartContextValue","useMemo","undefined","totalQuantity","reduce","previous","linesAdd","linesRemove","linesUpdate","_jsx","flattenConnection"],"mappings":"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"}