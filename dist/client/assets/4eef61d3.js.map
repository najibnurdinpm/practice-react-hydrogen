{"version":3,"file":"4eef61d3.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/utilities/parseMetafieldValue/parseMetafieldValue.js","../../../node_modules/@shopify/hydrogen/dist/esnext/hooks/useParsedMetafields/useParsedMetafields.js","../../../node_modules/@shopify/hydrogen/dist/esnext/components/ProductProvider/ProductProvider.client.js"],"sourcesContent":["import { parseJSON } from '../parse';\n/**\n * The `parseMetafieldValue` function parses a [Metafield](https://shopify.dev/api/storefront/reference/common-objects/metafield)'s `value` from a string into a sensible type corresponding to the [Metafield](https://shopify.dev/api/storefront/reference/common-objects/metafield)'s `type`.\n */\nexport function parseMetafieldValue(metafield) {\n    if (metafield.value == null) {\n        return metafield.value;\n    }\n    switch (metafield.type) {\n        case 'boolean':\n            return metafield.value == 'true';\n        case 'number_integer':\n            return parseInt(metafield.value);\n        case 'number_decimal':\n            return parseFloat(metafield.value);\n        case 'date':\n        case 'date_time':\n            return new Date(metafield.value);\n        case 'json':\n        case 'weight':\n        case 'dimension':\n        case 'volume':\n        case 'rating':\n            return parseJSON(metafield.value);\n        case 'color':\n        case 'single_line_text_field':\n        case 'multi_line_text_field':\n        case 'product_reference':\n        case 'page_reference':\n        case 'variant_reference':\n        case 'file_reference':\n        case 'url':\n        default:\n            return metafield.value;\n    }\n}\n","import { useMemo } from 'react';\nimport { flattenConnection, parseMetafieldValue } from '../../utilities';\n/**\n * The `useParsedMetafields` hook transforms a [MetafieldConnection](https://shopify.dev/api/storefront/reference/common-objects/metafieldconnection)\n * in an array of metafields whose `values` have been parsed according to the metafield `type`.\n */\nexport function useParsedMetafields(\n/** A [MetafieldConnection](https://shopify.dev/api/storefront/reference/common-objects/metafieldconnection). */\nmetafields) {\n    return useMemo(() => {\n        if (!metafields) {\n            throw new Error(`'useParsedMetafields' needs metafields`);\n        }\n        return flattenConnection(metafields).map((metafield) => {\n            return {\n                ...metafield,\n                value: parseMetafieldValue(metafield),\n            };\n        });\n    }, [metafields]);\n}\n","import React, { useMemo } from 'react';\nimport { useParsedMetafields } from '../../hooks';\nimport { flattenConnection } from '../../utilities';\nimport { ProductContext } from './context';\nimport { ProductOptionsProvider } from './ProductOptionsProvider.client';\n/**\n * The `ProductProvider` component sets up a context with product details. Descendents of\n * this component can use the `useProduct` hook.\n */\nexport function ProductProvider({ children, data: product, initialVariantId, }) {\n    const metafields = useParsedMetafields(product.metafields || {});\n    // @ts-expect-error The types here are broken on main, need to come back and fix them sometime\n    const providerValue = useMemo(() => {\n        return {\n            ...product,\n            metafields,\n            metafieldsConnection: product.metafields,\n            media: product.media ? flattenConnection(product.media) : undefined,\n            mediaConnection: product.media,\n            variants: product.variants\n                ? flattenConnection(product.variants)\n                : undefined,\n            variantsConnection: product.variants,\n            images: product.images ? flattenConnection(product.images) : undefined,\n            imagesConnection: product.images,\n            collections: product.collections\n                ? flattenConnection(product.collections)\n                : undefined,\n            collectionsConnection: product.collections,\n        };\n    }, [metafields, product]);\n    return (React.createElement(ProductContext.Provider, { value: providerValue },\n        React.createElement(ProductOptionsProvider, { initialVariantId: initialVariantId }, children)));\n}\n"],"names":["useMemo","children","data","product","initialVariantId","metafields","useParsedMetafields","providerValue","metafieldsConnection","media","flattenConnection","undefined","mediaConnection","variants","variantsConnection","images","imagesConnection","collections","collectionsConnection","_jsx"],"mappings":"qqBAIO,WAA6B,EAAW,CAC3C,GAAI,EAAU,OAAS,KACnB,MAAO,GAAU,MAErB,OAAQ,EAAU,UACT,UACD,MAAO,GAAU,OAAS,WACzB,iBACD,MAAO,UAAS,EAAU,KAAK,MAC9B,iBACD,MAAO,YAAW,EAAU,KAAK,MAChC,WACA,YACD,MAAO,IAAI,MAAK,EAAU,KAAK,MAC9B,WACA,aACA,gBACA,aACA,SACD,MAAO,GAAU,EAAU,KAAK,MAC/B,YACA,6BACA,4BACA,wBACA,qBACA,wBACA,qBACA,cAED,MAAO,GAAU,MAE7B,CC7BO,WAEP,EAAY,CACR,MAAOA,GAAO,QAAA,QAAC,IAAM,CACjB,GAAI,CAAC,EACD,KAAM,IAAI,OAAM,wCAAwC,EAE5D,MAAO,GAAkB,CAAU,EAAE,IAAI,AAAC,GAC/B,OACA,GADA,CAEH,MAAO,EAAoB,CAAS,CACpD,EACS,CACT,EAAO,CAAC,CAAU,CAAC,CACnB,CCXO,WAAyB,CAAEC,WAAUC,KAAMC,EAASC,oBAAqB,CAC5E,KAAMC,GAAaC,EAAoBH,EAAQE,YAAc,CAAvB,CAAA,EAEhCE,EAAgBP,EAAAA,QAAAA,QAAQ,IACnB,OACAG,GADA,CAEHE,aACAG,qBAAsBL,EAAQE,WAC9BI,MAAON,EAAQM,MAAQC,EAAkBP,EAAQM,KAAT,EAAkBE,OAC1DC,gBAAiBT,EAAQM,MACzBI,SAAUV,EAAQU,SACZH,EAAkBP,EAAQU,QAAT,EACjBF,OACNG,mBAAoBX,EAAQU,SAC5BE,OAAQZ,EAAQY,OAASL,EAAkBP,EAAQY,MAAT,EAAmBJ,OAC7DK,iBAAkBb,EAAQY,OAC1BE,YAAad,EAAQc,YACfP,EAAkBP,EAAQc,WAAT,EACjBN,OACNO,sBAAuBf,EAAQc,cAEpC,CAACZ,EAAYF,CAAb,CAlB0B,EAmB7B,MAAAgB,GAAA,EAAA,SAAA,CAAA,MAA8DZ,EAA9D,SAAAY,EAAA,EAAA,CAAA,iBACoEf,EADpE,SACwFH,CADxF,CAAA,CAAA,CAAA,CAEH"}